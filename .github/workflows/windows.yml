name: 3 | Windows

on:
  workflow_call:
    inputs:
      version:
        required: true
        type: string
  workflow_dispatch:
    inputs:
      version:
        description: 'Version'
        type: string
        default: 'v0.0'
        
env:
  GODOT_VERSION: 4.4.1
  EXPORT_FOLDER: bin/windows_x86_64

run-name: 'Build GoZen for Windows version: ${{ inputs.version }} by @${{ github.actor }}'

jobs:
  build-deps:
    name: 'Build Windows dependencies'
    uses: ./.github/workflows/windows_deps.yml

  build-gozen-windows:
    needs: ['build-deps']
    name: 'Build GoZen'
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - uses: actions/checkout@v3
      - uses: msys2/setup-msys2@v2
        with:
          msystem: UCRT64
          update: true
          install: |
            git
            subversion
            unzip
            mingw-w64-ucrt-x86_64-binutils
            mingw-w64-ucrt-x86_64-crt-git
            mingw-w64-ucrt-x86_64-gcc
            mingw-w64-ucrt-x86_64-gdb
            mingw-w64-ucrt-x86_64-gdb-multiarch
            mingw-w64-ucrt-x86_64-headers-git
            mingw-w64-ucrt-x86_64-libmangle-git
            mingw-w64-ucrt-x86_64-libwinpthread
            mingw-w64-ucrt-x86_64-pkgconf
            mingw-w64-ucrt-x86_64-tools-git
            mingw-w64-ucrt-x86_64-winpthreads
            mingw-w64-ucrt-x86_64-winstorecompat-git
            mingw-w64-ucrt-x86_64-ninja
            mingw-w64-ucrt-x86_64-make
            mingw-w64-ucrt-x86_64-diffutils
            mingw-w64-ucrt-x86_64-yasm
            mingw-w64-ucrt-x86_64-nasm
            mingw-w64-ucrt-x86_64-python
            mingw-w64-ucrt-x86_64-scons
            mingw-w64-ucrt-x86_64-cmake
            mingw-w64-ucrt-x86_64-autotools

      - name: 'Checkout submodules'
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: 'Prepare Godot'
        run: |
          if [ ! -f Godot_v${{ env.GODOT_VERSION }}-stable.x86_64 ]; then
            echo "Downloading Godot editor ..."
            wget -q -O godot_windows.zip https://github.com/godotengine/godot-builds/releases/download/${{ env.GODOT_VERSION }}-stable/Godot_v${{ env.GODOT_VERSION }}-stable_win64.exe.zip 
            unzip -o godot_windows.zip
          else
            echo "Godot editor found in cache."
          fi

          export exportPath=$(cygpath -u "$APPDATA/Godot/export_templates/${{ env.GODOT_VERSION }}.stable")
          if [ ! -d $exportPath ]; then
            echo "Downloading Godot export templates ..."
            wget -q -O godot_export_templates.tpz https://github.com/godotengine/godot-builds/releases/download/${{ env.GODOT_VERSION }}-stable/Godot_v${{ env.GODOT_VERSION }}-stable_export_templates.tpz
            mkdir -p $exportPath
            unzip -o godot_export_templates.tpz -d $exportPath
            mv $exportPath/templates/* $exportPath/
            rm -rf $exportPath/templates
          else
            echo "Godot export templates found in cache."
          fi

          sed -i 's|^config/version\s*=.*|config/version="${{ inputs.version }}"|' src/project.godot

      - name: Get x264
        uses: actions/download-artifact@v4
        with:
          name: dep_win_x264
          path: libs/ffmpeg/bin_windows

      - name: Get x265
        uses: actions/download-artifact@v4
        with:
          name: dep_win_x265
          path: libs/ffmpeg/bin_windows

      - name: Get aom
        uses: actions/download-artifact@v4
        with:
          name: dep_win_aom
          path: libs/ffmpeg/bin_windows

      - name: Get svt_av1
        uses: actions/download-artifact@v4
        with:
          name: dep_win_svt_av1
          path: libs/ffmpeg/bin_windows

      - name: Get vpx
        uses: actions/download-artifact@v4
        with:
          name: dep_win_vpx
          path: libs/ffmpeg/bin_windows

      - name: Get opus
        uses: actions/download-artifact@v4
        with:
          name: dep_win_opus
          path: libs/ffmpeg/bin_windows

      - name: Get ogg + vorbis
        uses: actions/download-artifact@v4
        with:
          name: dep_win_ogg_vorbis
          path: libs/ffmpeg/bin_windows

      - name: Get mp3lame
        uses: actions/download-artifact@v4
        with:
          name: dep_win_mp3lame
          path: libs/ffmpeg/bin_windows

      - name: 'Compiling FFmpeg'
        working-directory: ./libs
        run: |
          echo $(nproc) | python3 -c "import sys; sys.path.append('.'); from build_utils import build_ffmpeg; build_ffmpeg.build_ffmpeg_windows('x86_64', 4, {})"
          echo $(nproc) | python3 -c "import sys; sys.path.append('.'); from build_utils import build_ffmpeg; build_ffmpeg.copy_lib_files_windows('x86_64')"
        
      - name: 'Compiling GDE GoZen'
        working-directory: ./libs
        run: |
          scons -j$(nproc) target=template_debug platform=windows arch=x86_64 use_static_cpp=yes use_mingw=yes
          scons -j$(nproc) target=template_release platform=windows arch=x86_64 use_static_cpp=yes use_mingw=yes

      - name: 'Prepare folder'
        run: |
          mkdir -p ${{ env.EXPORT_FOLDER }}
          cp LICENSE ${{ env.EXPORT_FOLDER }}/LICENSE
          cp MANUAL.md ${{ env.EXPORT_FOLDER }}/MANUAL.md

      - name: 'Export for Windows'
        working-directory: ./src
        run: |
          ../Godot_v${{ env.GODOT_VERSION }}-stable_win64_console.exe --import godot.project --headless
          ../Godot_v${{ env.GODOT_VERSION }}-stable_win64_console.exe --headless --export-release Windows_x86_64 ../${{ env.EXPORT_FOLDER }}/GoZen.exe

      - name: 'Copy extra libs'
        run: |
          echo "Copying libs"
          cp libs/bin/windows_x86_64/*.dll  ${{ env.EXPORT_FOLDER }}

      - name: 'Upload Windows'
        uses: actions/upload-artifact@v4
        with:
          name: GoZen_Windows_x86_64_${{ inputs.version }}
          path: ${{ env.EXPORT_FOLDER }}
          retention-days: 2

